#+title Runemacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
* Basic UI Configuration

#+begin_src emacs-lisp 
(setq inhibit-startup-message t)
(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room
(menu-bar-mode -1)            ; Disable the menu bar

;; Set up the visible bell
(setq visible-bell t)
#+end_src

** Font configuration
#+begin_src emacs-lisp 
  ;; You will most likely need to adjust this font size for your system!
  (defvar runemacs/default-font-size 120)
  (defvar runemacs/default-variable-font-size 130)

  ;; Make frame transparency overridable
  (defvar runemacs/frame-transparency '(90 . 80))
;;  (defvar runemacs/frame-transparency-inactive '(80 . 80))

  (set-face-attribute 'default nil :font "Fira Code Retina" :height runemacs/default-font-size)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height runemacs/default-font-size)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height runemacs/default-variable-font-size :weight 'regular)

  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha runemacs/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,runemacs/frame-transparency))

  ;; maximize frame
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

** Line numbers

perhaps needs to be after package manager?

#+begin_src emacs-lisp
(column-number-mode)
(global-display-line-numbers-mode t)

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

* Emacs package manager
#+begin_src emacs-lisp
;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

* Keybindings

**  General

easy keybinding configuation that integrates well with which-key

#+begin_src emacs-lisp

  (use-package general
      :config
      (general-create-definer runemacs/leader-keys
        :keymaps '(normal insert visual emacs)
        :prefix "SPC"
        :global-prefix "C-SPC")

      (runemacs/leader-keys
        "t"  '(:ignore t :which-key "toggles")
        "tt" '(counsel-load-theme :which-key "choose theme")
        "fde" '(lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/Emacs.org")))))

#+end_src

** Which key
#+begin_src emacs-lisp

  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))

#+end_src

** Text Scaling

This is an example of using [[https://github.com/abo-abo/hydra][Hydra]] to design a transient key binding for quickly adjusting the scale of the text on screen.  We define a hydra that is bound to =C-s t s= and, once activated, =j= and =k= increase and decrease the text scale.  You can press any other key (or =f= specifically) to exit the transient key map.

#+begin_src emacs-lisp

  (use-package hydra
    :defer t)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

;  (runemacs/leader-keys
;    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

* Terminal modes

*** term
Run a terminal with =M-x term!  *Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts 
- =C-c C-k= - Enter char-mode
- =C-c C-j= - Return to line-mode

#+begin_src emacs-lisp

  (use-package term
    :commands term
    :config
    (setq explicit-shell-file-name "bash") ;; Change this to zsh, etc
    ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

    ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

#+end_src

*** Better term-mode colors

The =eterm-256color= package enhances the output of =term-mode= to enable handling of a wider range of color codes so that many popular terminal applications look as you would expect them to.  Keep in mind that this package requires =ncurses= to be installed on your machine so that it has access to the =tic= program.  Most Linux distributions come with this program installed already so you may not have to do anything extra to use it.

#+begin_src emacs-lisp

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

#+end_src

*** vterm
Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependencies]] installed before trying to use =vterm= because there is a module that will need to be compiled before you can use it successfully.

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
    ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))

#+end_src
*** Eshell
Useful key bindings: (first two didn't seem to work for me)
- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts 
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-esh-history= - A searchable history of commands typed into Eshell


#+begin_src emacs-lisp

  (defun runemacs/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt
    :after eshell)

  (use-package eshell
    :hook (eshell-first-time-mode . runemacs/configure-eshell)
    :config

    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))

    (eshell-git-prompt-use-theme 'powerline))

#+end_src

* File management

** Dired

*** Key Bindings

**** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

**** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** Configuration

#+begin_src emacs-lisp

       (use-package dired
         :ensure nil
         :commands (dired dired-jump)
         :bind (("C-x C-j" . dired-jump))
         :custom ((dired-listing-switches "-agho --group-directories-first")))

       (use-package dired-single
         :commands (dired dired-jump))

       (use-package all-the-icons-dired
         :hook (dired-mode . all-the-icons-dired-mode))

       (use-package dired-open
         :commands (dired dired-jump)
         :config
         ;; Doesn't work as expected!
         ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
         (setq dired-open-extensions '(("png" . "feh")
                                       ("mkv" . "mpv"))))

       (use-package dired-hide-dotfiles
         :hook (dired-mode . dired-hide-dotfiles-mode)
         :bind (
                :map dired-mode-map
                     ("h" . dired-hide-dotfiles-mode)))
		    
  ;; gg maybe a better way to do this.
  ;; (define-key dired-mode-map "h" 'dired-hide-dotfiles-mode)

#+end_src


* Org mode

** Org mode fonts and bullets

#+begin_src emacs-lisp
  (defun runemacs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . runemacs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"
          org-hide-emphasis-markers t)

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

      (setq org-agenda-files
          '("~/.emacs.d/OrgFiles/Tasks.org")))

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (defun runemacs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . runemacs/org-mode-visual-fill))

  (defun runemacs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))
#+end_src

** Org agenda

I eliminated "Low-effort next actions" and "Workflow Status" section.
See daviwil/emacs-from-scratch to get it back.

#+begin_src emacs-lisp
  (setq org-todo-keywords
    '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
      (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

  ;; Configure custom agenda views
  (setq org-agenda-custom-commands
   '(("d" "Dashboard"
     ((agenda "" ((org-deadline-warning-days 7)))
      (todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))
      (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

    ("n" "Next Tasks"
     ((todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))))

    ("W" "Work Tasks" tags-todo "+work-email")))
#+end_src

** Org capture

#+begin_src emacs-lisp
  (setq org-capture-templates
    `(("t" "Tasks / Projects")
      ("tt" "Task" entry (file+olp "~/.emacs.d/OrgFiles/Tasks.org" "Inbox")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

      ("j" "Journal Entries")
      ("jj" "Journal" entry
           (file+olp+datetree "~/.emacs.d/OrgFiles/Journal.org")
           "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
           ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
           :clock-in :clock-resume
           :empty-lines 1)
      ("jm" "Meeting" entry
           (file+olp+datetree "~/.emacs.d/OrgFiles/Journal.org")
           "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
           :clock-in :clock-resume
           :empty-lines 1)

      ("w" "Workflows")
      ("we" "Checking Email" entry (file+olp+datetree "~/.emacs.d/OrgFiles/Journal.org")
           "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

      ("m" "Email Workflow")
      ("mf" "Follow Up" entry (file+olp "~/.emacs.d/OrgFiles/Mail.org" "Follow Up")
              "* TODO %:fromname re %a\n\n %i"
              :immediate-finish t)
      ("mr" "Read Later" entry (file+olp "~/.emacs.d/OrgFiles/Mail.org" "Read Later")
              "* TODO %:fromname re %a\n\n %i"
              :immediate-finish t)
      ;;("m" "Metrics Capture")
     ;; ("mw" "Weight" table-line (file+headline "~/.emacs.d/OrgFiles/Metrics.org" "Weight")
       ;;"| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)
      ))

  (setq org-tag-alist
    '((:startgroup)
       ; Put mutually exclusive tags here
       (:endgroup)
       ("home" . ?H)
       ("work" . ?W)
       ("projects" . ?p)
       ("agenda" . ?a)
       ("email/admin" . ?e)
       ("computing" . ?c)
       ("idea" . ?i)))

  (setq org-refile-targets
    '(("~/.emacs.d/OrgFiles/Archive.org" :maxlevel . 1)
      ("~/.emacs.d/OrgFiles/Tasks.org" :maxlevel . 1)))

  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
#+end_src

** Org-babel-jupyter
#+begin_src emacs-lisp
  ;; (use-package jupyter)
  ;;  (setq org-babel-default-header-args:jupyter-julia '((:async . "yes")
  ;;                                                      (:session . "jl")
  ;;                                                      (:kernel . "julia-1.6")))
 ;; (org-babel-do-load-languages
   ;;'org-babel-load-languages
  ;; '((emacs-lisp . t)
  ;;   (jupyter . t)))
#+end_src

** Org-babel

#+begin_src emacs-lisp
      ;; Automatically tangle our Emacs.org config file when we save it
      (defun runemacs/org-babel-tangle-config ()
        (when (string-equal (file-name-directory (buffer-file-name))
                            (expand-file-name user-emacs-directory))
          ;; Dynamic scoping to the rescue
          (let ((org-confirm-babel-evaluate nil))
            (org-babel-tangle))))

      (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'runemacs/org-babel-tangle-config)))

    (with-eval-after-load 'org
      (org-babel-do-load-languages
      'org-babel-load-languages
     '((emacs-lisp . t)
       (matlab . t)))
      (push '("conf-unix" . conf-unix) org-src-lang-modes))

    (setq org-confirm_babel-evaluate nil)

    (with-eval-after-load 'org
      ;; This is needed as of Org 9.2
      (require 'org-tempo)

      (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
      (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
      (add-to-list 'org-structure-template-alist '("py" . "src python"))
      (add-to-list 'org-structure-template-alist '("ma" . "src matlab")))
#+end_src

* Searching via Ivy and Counsel

** command log, helpful 
#+begin_src emacs-lisp
    (use-package command-log-mode)

  ;;  (use-package which-key
      ;; :defer 0
      ;; :diminish which-key-mode
      ;; :config
      ;; (which-key-mode)
      ;; (setq which-key-idle-delay 1))

    (use-package helpful
      :commands (helpful-callable helpful-variable helpful-command helpful-key)
      :custom
      (counsel-describe-function-function #'helpful-callable)
      (counsel-describe-variable-function #'helpful-variable)
      :bind
      ([remap describe-function] . counsel-describe-function)
      ([remap describe-command] . helpful-command)
      ([remap describe-variable] . counsel-describe-variable)
      ([remap describe-key] . helpful-key))
#+end_src

** Ivy
#+begin_src emacs-lisp
  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
    ;(prescient-persist-mode 1)
    (ivy-prescient-mode 1))
#+end_src

* Doom themes
#+begin_src emacs-lisp
  ;; simplified mode line
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 10)))

  ;; I pick palenight below
  (use-package doom-themes
    :init (load-theme 'doom-palenight t))

  (use-package all-the-icons)

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

* Project management

** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/projects")
    (setq projectile-project-search-path '("~/projects")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :after projectile
  :config (counsel-projectile-mode))
#+end_src

** Magit
#+begin_src emacs-lisp
(use-package magit
  :commands magit-status)
;  :custom
;  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

** Forge
#+begin_src emacs-lisp

    ;; NOTE: Make sure to configure a GitHub token before using this package!
    ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
    ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge
    :after magit)

  (setq auth-sources '("~/.authinfo.gpg"))

#+end_src

* Programming
** Rainbow delimiters
#+begin_src emacs-lisp

  (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))

  #+end_src

** Matlab
#+begin_src emacs-lisp
  (use-package matlab
    :ensure matlab-mode
    :config
    (add-to-list
     'auto-mode-alist
     '("\\.m\\'" . matlab-mode))
    (setq matlab-indent-function t)
    (setq matlab-shell-command "matlab"))

  (setq matlab-indent-function-body t)  ; if you want function bodies indented
   (setq matlab-verify-on-save-flag nil) ; turn off auto-verify on save
   (defun my-matlab-mode-hook ()
       (setq fill-column 76))              ; where auto-fill should wrap
   (add-hook 'matlab-mode-hook 'my-matlab-mode-hook)

   (defun my-matlab-shell-mode-hook ()
     '())
   (add-hook 'matlab-shell-mode-hook 'my-matlab-shell-mode-hook)
#+end_src

** Julia
#+begin_src emacs-lisp
  (use-package julia-mode)

  (use-package julia-repl
    :ensure t
    :commands julia-repl julia-repl-mode
    :init (require 'julia-repl)
    :config
    (setq julia-repl-executable-records
          '(
            (default "julia")))
           (load-library "julia-mode"))

          ;; (remote "ssh -t me@myhost /usr/bin/julia")

  (add-hook 'julia-mode-hook 'julia-repl-mode) ;; always use minor mode

#+end_src

* Languages
*** IDE Features with lsp-mode

**** lsp-mode

We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].  Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybindings will be added.  I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp

  (defun runemacs/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . runemacs/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))

#+end_src

**** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

  (use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

**** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp)

#+end_src

**** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp

  (use-package lsp-ivy
    :after lsp)

#+end_src

** Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp

;;  (use-package company
  ;;  :after lsp-mode
;;    :hook (lsp-mode . company-mode)
;;    :bind (:map company-active-map
;;           ("<tab>" . company-complete-selection))
;;          (:map lsp-mode-map
;;           ("<tab>" . company-indent-or-complete-common))
;;    :custom
;;    (company-minimum-prefix-length 1)
;;    (company-idle-delay 0.0))

;;  (use-package company-box
;;    :hook (company-mode . company-box-mode))

#+end_src

** lsp-julia

See https://github.com/non-Jedi/lsp-julia for installation instructions.

#+begin_src emacs-lisp
;;      (setq lsp-julia-package-dir nil)
;;      (setq lsp-julia-flags `("-J ~/.julia/languageserver.so"))
;;      (require 'lsp-julia) ;must come after this!

;;    (use-package lsp-julia
;;      :config
;;      (setq lsp-julia-default-environment "~/.julia/environments/v1.6")
;;      (setq lsp-enable-folding t))

;;    (add-hook 'julia-mode-hook #'lsp-mode)
#+end_src

* Window management
** Winum
It puts numbers in the modeline! C-x w and the number to switch.
#+begin_src emacs-lisp
  (use-package winum
    :config
  (winum-mode))
#+end_src

** Ace window
Use the home row to select window, but doesn't show them until M-x ace-window.
#+begin_src emacs-lisp
  (use-package ace-window)
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
#+end_src

** Winner mode
winner-mode provides useful functions for undoing and redoing window configurations:
#+begin_src emacs-lisp
  (use-package winner
    :ensure nil
    :config
    (winner-mode))
#+end_src

** Buffer move
Use buffer-move for a more general solution: Turn on a mode where you can move the current buffer around with arrow keys, any other key finishes it
#+begin_src emacs-lisp
  (use-package buffer-move)
#+end_src

** Windmove keybindings
Default keybindings conflict with org mode and other selections.
Here I make my own keybindings in analogy to emacs point movement.
#+begin_src emacs-lisp
    ;;  (windmove-default-keybindings nil)
  (global-set-key (kbd "C-M-b")  'windmove-left)
  (global-set-key (kbd "C-M-f") 'windmove-right)
  (global-set-key (kbd "C-M-p")    'windmove-up)
  (global-set-key (kbd "C-M-n")  'windmove-down)
#+end_src

* LaTex

** My version of  JWiegly's config [[https://github.com/jwiegley/use-package/issues/379][issue #379 in use-package]]
 multi-file document structure, LaTex packages support, in the setq variables
#+begin_src emacs-lisp

        (use-package tex-mode
          :defer t
          :ensure auctex                   ; auctex
          :mode ("\\.tex\\'" . TeX-latex-mode)
          :init
          (setq reftex-plug-into-AUCTeX t)
          (setq TeX-auto-save t)
          (setq TeX-parse-self t)
          (setq-default TeX-master nil)
          (add-hook 'LaTeX-mode-hook 'reftex-mode)
          (add-hook 'plain-TeX-mode-hook
                    (lambda () (set (make-local-variable 'TeX-electric-math)
                                    (cons "$" "$"))))
          (add-hook 'LaTeX-mode-hook
                    (lambda () (set (make-local-variable 'TeX-electric-math)
                                    (cons "$" "$"))))
          (add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
          )

      (setq bibtex-autokey-titleword-length 12)
      (setq bibtex-autokey-year-length 4)
      (setq  bibtex-autokey-name-case-convert-function 'identity)
      (setq  bibtex-autokey-titleword-case-convert-function 'identity)
      (setq  bibtex-autokey-titlewords 1)
      (setq  bibtex-autokey-titlewords-stretch 0)
      (setq  bibtex-autokey-name-separator "-")
      (setq  bibtex-autokey-name-year-separator "-")
      (setq  bibtex-autokey-year-title-separator ":")
      (setq  bibtex-autokey-names 2)
 
        (use-package ebib
          :after tex-mode
          :init
          (global-set-key (kbd "C-c e") 'ebib)
          :bind (
          :map LaTeX-mode-map
               ("C-c b" . ebib-insert-citation))
          :custom
          (ebib-bib-search-dirs '("home/gebbie/texmf/bibtex/bib/"))
          (ebib-preload-bib-files '("/home/gebbie/texmf/bibtex/bib/main.bib"))
          (ebib-use-timestamp t)
          (ebib-citation-commands '((latex-mode
                                             (("cite"   "\\cite%<[%A]%>[%A]{%(%K%,)}")
                                              ("citep"   "\\citep%<[%A]%>[%A]{%(%K%,)}")
                                              ("citet"   "\\citet%<[%A]%>[%A]{%(%K%,)}")
                                              ("citeps"   "\\citep{%K}")
                                              ("citets"   "\\citet{%K}")
                                              ("apacite"   "\\cite{%K}")
                                              ("apacitelong"   "\\cite%<<%A>%>[%A]{%(%K%,)}")
                                              ("apaciteA"   "\\citeA{%K}")
                                              ("paren" "\\parencite%<[%A]%>[%A]{%(%K%,)}")
                                              ("foot" "\\footcite%<[%A]%>[%A]{%(%K%,)}")
                                              ("text" "\\textcite%<[%A]%>[%A]{%(%K%,)}")
                                              ("smart" "\\smartcite%<[%A]%>[%A]{%(%K%,)}")
                                              ("super" "\\supercite{%K}")
                                              ("auto" "\\autocite%<[%A]%>[%A]{%(%K%,)}")
                                              ("cites2" "\\cites%<(%A)%>(%A)%(%<[%A]%>[%A]{%K}%)")
                                              ("parens" "\\parencites%<(%A)%>(%A)%(%<[%A]%>[%A]{%K}%)")
                                              ("foots" "\\footcites%<(%A)%>(%A)%(%<[%A]%>[%A]{%K}%)")
                                              ("texts" "\\textcites%<(%A)%>(%A)%(%<[%A]%>[%A]{%K}%)")
                                              ("smarts" "\\smartcites%<(%A)%>(%A)%(%<[%A]%>[%A]{%K}%)")
                                              ("supers" "\\supercites%<(%A)%>(%A)%(%<[%A]%>[%A]{%K}%)")
                                              ("autos" "\\autoscites%<(%A)%>(%A)%(%<[%A]%>[%A]{%K}%)")
                                              ("author" "\\citeauthor%<[%A]%>[%A]{%(%K%,)}")
                                              ("title" "\\citetitle%<[%A]%>[%A]{%(%K%,)}")
                                              ("year" "\\citeyear%<[%A]%>[%A][%A]{%K}")
                                              ("date" "\\citedate%<[%A]%>[%A]{%(%K%,)}")
                                              ("full" "\\fullcite%<[%A]%>[%A]{%(%K%,)}")))
                                    (org-mode
                                     (("ebib" "[[ebib:%K][%D]]")))
                                    (markdown-mode
                                     (("text" "@%K%< [%A]%>")
                                      ("paren" "[%(%<%A %>@%K%<, %A%>%; )]")
                                      ("year" "[-@%K%< %A%>]")))
                                    )))

#+end_src

conflict with C-M-j in ebib entry list (C-M-j is ivy-immediate-done, so it can't be used to switch buffers as defined by daviwil)

;;#+begin_src emacs-lisp

   ;;(with-eval-after-load 'auctex
;;       (define-key ebib-multiline-mode-map
  ;;       "\C-c c" nil)
    ;;   (define-key ebib-multiline-mode-map
      ;;   "\C-c | c" 'ebib-quit-multiline-buffer-and-save))

;;#+end_src

** ebib-biblio linkage

#+begin_src emacs-lisp

     (use-package biblio
             :after ebib)

   (setq biblio-bibtex-use-autokey t)

  ;; being polite with CrossRef and getting faster response
  (setq biblio-crossref-user-email-address "ggebbie@whoi.edu")

     (with-eval-after-load 'ebib
     (require 'ebib-biblio)
     (define-key biblio-selection-mode-map (kbd "e") #'ebib-biblio-selection-import))

       ;; Didn't work because ebib-biblio not a repository package
       ;; straight.el could fix it, but i'm not using it
       ;;  (use-package ebib-biblio
         ;;  :after (ebib biblio)
           ;;:bind (:map biblio-selection-mode-map
             ;;          ("e" . ebib-biblio-selection-import))
       ;;    :demand t)

#+end_src

* Email

** inital mu4e setup

Add the initial =mu4e= configuration:

*IMPORTANT NOTE*: As of mu4e 1.3.7, =mu4e-maildir-shortcuts= now has a new format!  Here is the equivalent:

#+begin_src emacs-lisp

  (use-package mu4e
    :ensure nil
    :load-path "/usr/share/emacs/site-lisp/mu4e/"
    :defer 20 ; Wait until 20 seconds after startup
    :config

    ;; craft an email workflow in org mode
    (require 'mu4e-org)

    ;; This is set to 't' to avoid mail syncing issues when using mbsync
    (setq mu4e-change-filenames-when-moving t)

    ;; Refresh mail using isync every 10 minutes
    (setq mu4e-update-interval (* 10 60))
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-maildir "~/Mail")
      ;; Make sure plain text mails flow correctly for recipients
    (setq mu4e-compose-format-flowed t)

     ;; gg added this one
    (setq mu4e-compose-dont-reply-to-self t)
    (setq mu4e-contexts
          (list
           ;; Work account
           (make-mu4e-context
            :name "Gmail"
            :match-func
              (lambda (msg)
                (when msg
                  (string-prefix-p "/Gmail" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "jgebbie@whoi.edu")
                    (user-full-name    . "Jake Gebbie")
                    (smtpmail-smtp-server  . "smtp.gmail.com")
                    (smtpmail-smtp-service . 465)
                    (smtpmail-stream-type  . ssl)
                    (mu4e-drafts-folder  . "/Gmail/[Gmail]/Drafts")
                    (mu4e-sent-folder  . "/Gmail/[Gmail]/Sent Mail")
                    (mu4e-refile-folder  . "/Gmail/[Gmail]/All Mail")
                    (mu4e-trash-folder  . "/Gmail/[Gmail]/Trash")))))

  (defun runemacs/capture-mail-follow-up (msg)
    (interactive)
    (call-interactively 'org-store-link)
    (org-capture nil "mf"))

  (defun runemacs/capture-mail-read-later (msg)
    (interactive)
    (call-interactively 'org-store-link)
    (org-capture nil "mr"))

  ;; Add custom actions for our capture templates
    (add-to-list 'mu4e-headers-actions
                 '("follow up" . runemacs/capture-mail-follow-up) t)
    (add-to-list 'mu4e-view-actions
                 '("follow up" . runemacs/capture-mail-follow-up) t)
    (add-to-list 'mu4e-headers-actions
                 '("read later" . runemacs/capture-mail-read-later) t)
    (add-to-list 'mu4e-view-actions
                 '("read later" . runemacs/capture-mail-read-later) t)

    (setq mu4e-maildir-shortcuts
        '((:maildir "/Gmail/Inbox"    :key ?i)
          (:maildir "/Gmail/[Gmail]/Sent Mail" :key ?s)
          (:maildir "/Gmail/[Gmail]/Trash"     :key ?t)
          (:maildir "/Gmail/[Gmail]/Drafts"    :key ?d)
          (:maildir "/Gmail/[Gmail]/All Mail"  :key ?a)))

    (setq mu4e-bookmarks
          '((:name "Unread messages" :query "flag:unread AND NOT flag:trashed" :key ?i)
            (:name "Today's messages" :query "date:today..now" :key ?t)
            (:name "Last 7 days" :query "date:7d..now" :hide-unread t :key ?w)
            (:name "Messages with images" :query "mime:image/*" :key ?p)
            (:name "ocean" :query "to:ggebbie@whoi.edu OR to:jgebbie@whoi.edu" :key ?o)
            (:name "gmail" :query "to:gebbie@gmail.com" :key ?g)))

    ;; Run mu4e in background to sync mail 
    (mu4e t))

#+end_src

More Gmail configuration tips: https://www.djcbsoftware.nl/code/mu/mu4e/Gmail-configuration.html

** Multiple email accounts

** Configuring SMTP

SMTP is [[https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol][Simple Mail Transfer Protocol]], an old standard for connecting to a server to send email.

Traditionally, SMTP servers run on port 25 without any kind of encryption.  These days, most will either use SSL or TLS, either of which may use different ports.

- =smtpmail-smtp-server= - The host where we connect to send mail
- =smtpmail-smtp-service= - The port number of the SMTP service (defaults to 25)
- =smtpmail-stream-type= - Determines whether SSL or TLS should be used when connecting

  
** Configure the mail-sending function

So that we don't get prompted about how mail should be sent, we will configure the =message-send-mail-function= variable to automatically call =smtpmail-send-it=:

#+begin_src emacs-lisp

    ;; Configure the function to use for sending mail
    (setq message-send-mail-function 'smtpmail-send-it)

#+end_src


** Sending HTML mail with org-mime

We can use the [[https://github.com/org-mime/org-mime][org-mime]] package for this purpose:

#+begin_src emacs-lisp

  (use-package org-mime
    :ensure t)

#+end_src


** Customizing the HTML export style

As you might have noticed, the exported e-mail has section numbers for headings.  We can turn that off!

We can also customize the styling of individual HTML elements inside of the message using =org-mime-html-hook=.  Here's an example of making all code blocks have a dark background and light text:

You can easily add a hook to do this conversion for you automatically:
Alternatively if you just want be reminded when you didn't use HTML, use =org-mime-confirm-when-no-multipart=:

#+begin_src emacs-lisp

  (setq org-mime-export-options '(:section-numbers nil
                                  :with-author nil
                                  :with-toc nil))

  (add-hook 'org-mime-html-hook
            (lambda ()
              (org-mime-change-element-style
              "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
                            "#E6E1DC" "#232323"))))


  (add-hook 'message-send-hook 'org-mime-confirm-when-no-multipart)

#+end_src

** send HTML email with org-msg

#+begin_src emacs-lisp

      ;; (delete 'mu4e evil-collection-mode-list)
      ;; (delete 'mu4e-conversation evil-collection-mode-list)

  (use-package org-msg
    :after mu4e
    :config
    (setq mail-user-agent 'mu4e-user-agent)
    (org-msg-mode)
    (setq org-msg-recipient-names '(("jgebbie@whoi.edu"  . "Jake Gebbie"))
    org-msg-greeting-name-limit 3
    org-msg-default-alternatives '((new . (text html))
                                   (reply-to-html	. (text html))
                                   (reply-to-text	. (text)))
    org-msg-convert-citation t))

#+end_src

